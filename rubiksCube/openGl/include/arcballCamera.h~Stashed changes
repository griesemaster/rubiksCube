#ifndef ARCBALL_CAMERA
#define ARCBALL_CAMERA

#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/ext.hpp>
#include <glm/gtx/string_cast.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/gtx/quaternion.hpp>

class arcballCamera
{
private:
	int windowWidth;
	int windowHeight;
	bool isMouseActive;

    float angle;

    glm::vec3 startPosition;
    glm::vec3 currentPosition;
    glm::vec3 rotationAxis;

    bool useXAxis;
    bool useYAxis;


    glm::mat4 locationMatrix = glm::mat4(1); //used to hold translation data
    glm::quat orientationQuat = glm::quat(1, 0, 0, 0); //used to hold rotational data
    
public:
    arcballCamera(int window_width, int window_height, bool useX = true, bool useY = true);


    void mouseButtonCallback(GLFWwindow* window, int button, int action, int mods);
    void cursorCallback(GLFWwindow* window, double x, double y);
    double mapToBall(double x, double y);


    glm::mat4 getViewMatrix() { return locationMatrix * glm::toMat4(orientationQuat); };

    void translate(glm::vec3);

};

#endif // !ARCBALL_CAMERA
